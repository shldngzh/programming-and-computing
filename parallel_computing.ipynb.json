{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A Simple Example in Parallel Computing with Python\n",
    "## -- an example in weighted average calculating\n",
    "by Xiaodong (Sheldon) Zhai,  xz125@duke.edu"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Randomly generate some data given size of file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data file exists\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(2000000, 2)"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os, time\n",
    "import numpy as np\n",
    "\n",
    "# number of items in a data matrix\n",
    "n = int(2e6)\n",
    "\n",
    "# generate prices and volume data, and save the whole matrix in to a .npy file\n",
    "if os.path.isfile('paralle_million_data_{0}.npy'.format(n)):\n",
    "    print('data file exists')\n",
    "    mat = np.load('paralle_million_data_{0}.npy'.format(n))\n",
    "    if len(mat) != n:\n",
    "        prices = np.random.randint(201000, 2010500, size=(n, 1))\n",
    "        volume = np.random.randint(100, 200, size=prices.shape)\n",
    "        mat = np.array(list(zip(prices[:,0], volume[:,0])))\n",
    "        print('new data file generated, with size ', n)\n",
    "        np.save('paralle_million_data_{0}.npy'.format(n), mat)      \n",
    "else:\n",
    "    print('data file does not exist, new file generated')\n",
    "    prices = np.random.randint(201000, 2010500, size=(n, 1))\n",
    "    volume = np.random.randint(100, 200, size=prices.shape)\n",
    "    mat = np.array(list(zip(prices[:,0], volume[:,0])))\n",
    "    np.save('paralle_million_data_{0}.npy'.format(n), mat)\n",
    "mat.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### import library "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import multiprocessing \n",
    "from multiprocessing import cpu_count, Pool, Process, Queue\n",
    "cpu_count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### define the naive vwap calcualting function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def vwap(mat, window=5):\n",
    "    vwap = np.zeros(mat.shape[0])\n",
    "    for i in range(window, len(mat)):\n",
    "        weight = mat[i-window:i+1, 1]\n",
    "        vwap[i] = np.sum(mat[i-window:i+1, 0] * weight)/weight.sum()\n",
    "    return vwap"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### banchamrk time, without multiprocess optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 16.3 s, sys: 0 ns, total: 16.3 s\n",
      "Wall time: 16.3 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# banchmark time, without multiprocess optimization\n",
    "vwap_0 = vwap(mat, window=5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### time with Pool  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 30.9 ms, sys: 58.6 ms, total: 89.6 ms\n",
      "Wall time: 14 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "pool = Pool(processes=cpu_count())\n",
    "res = [pool.apply_async(vwap, (mat, 5,))]\n",
    "vwap_1 = np.array([r.get() for r in res])\n",
    "pool.close()\n",
    "pool.join()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### it does not work significantly!\n",
    "According to numerous tests and materials from the Internet, \n",
    "this is highly probable due to the Global Interpreter Lock (GIL) which may mean that only one line of code can \n",
    "be compiled in Python interpretor -- thus we cannot improve the performance."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### try Process to avoid GIL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Some clarification\n",
    "Here, because the calculation of vwap requires a 'communicaiton' between processes, we need to modify our\n",
    "functions of vwap, and a new mp_vwap() to be defined to manage the processes.\n",
    "\n",
    "###### the zeros beginning of vwap\n",
    "Firstly, we observe that given a vwap(mat, window), the returned vwap vector starts with several zeros this \n",
    "is because for the first window vwaps we do not have enough sample to conduct the calculation.\n",
    "\n",
    "###### communicaiton between processes\n",
    "The vwap calculating is not _independent_ due to the vwap[t] requires its neighbours of volume window, thus\n",
    "simply splitting the matrix/order_book into parts would lead to the fact that\n",
    "each process does not have the first several prices and volumes data to calculate, \n",
    "whic makes _zeros beginning_ for each part.\n",
    "\n",
    "###### how to solve this\n",
    "With those being said, we just need to let each process to handle data with extra previous window rows,\n",
    "so that the zeros beginning will be eliminated.\n",
    "And the modifited vwap function can return a chunkated vwap vector with zeros ignored.\n",
    "Also, for the very first process to handle the beginning part of data, we can conncatenate it with some \n",
    "zeros with respect to right corresponding window.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def mp_vwap(mat, nprocs, window=3):\n",
    "    \n",
    "    \n",
    "    # define a new vwap funciton, the only difference is the returned part\n",
    "    # of course, the logic behind has also changed: to handle mat with extra headers\n",
    "    def vwap2(mat, win, ):\n",
    "        vwap = np.zeros(len(mat))\n",
    "        for i in range(win, len(mat)):\n",
    "            weight = mat[i-win:i+1, 1]\n",
    "            vwap[i] = np.sum(mat[i-win:i+1, 0] * weight)/weight.sum()\n",
    "        return vwap[win:] \n",
    "        \n",
    "    def worker2(mat, uid, out_q, win):\n",
    "        outdict = {}\n",
    "        if uid == 0:\n",
    "            # if this is the first process, we add the chunkated zeros back\n",
    "            outdict[uid] = np.hstack([[0]*win, vwap2(mat, win)])\n",
    "        else:\n",
    "            outdict[uid] = vwap2(mat, win)\n",
    "        out_q.put(outdict)\n",
    "    \n",
    "    \n",
    "    \n",
    "    out_q = Queue()\n",
    "    chunksize = int(np.ceil(len(mat) / float(nprocs)))\n",
    "    procs = []\n",
    "\n",
    "    for i in range(nprocs):\n",
    "        p = Process(\n",
    "            target=worker2,\n",
    "            args=(mat[np.maximum(chunksize * i - window, 0) : chunksize * (i + 1)],\n",
    "                  i,\n",
    "                  out_q,\n",
    "                  window))\n",
    "        procs.append(p)\n",
    "        p.start()\n",
    "\n",
    "    \n",
    "    resultdict = {}\n",
    "    for i in range(nprocs):\n",
    "        resultdict.update(out_q.get())\n",
    "\n",
    "    # Wait for all worker processes to finish\n",
    "    for p in procs:\n",
    "        p.join()\n",
    "\n",
    "    return resultdict\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 299 ms, sys: 77.6 ms, total: 377 ms\n",
      "Wall time: 2.44 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "tmp = mp_vwap(mat, nprocs=8, window=5)\n",
    "# collect results from processes\n",
    "vwap_2 = []\n",
    "for k,v in tmp.items():\n",
    "    vwap_2.extend(v)\n",
    "vwap_2 = np.array(vwap_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "#### if two vwaps are the same"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.all(vwap_0 == vwap_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### So, nice job!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.4.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
